name: function-deploy

on:
  push:
    branches:
      - master
      - function-deploy-workload-identity # TODO: debug
    paths-ignore:
      - ".nvmrc"

      # Ignore files that are not used in production
      - "**.md"
      - "LICENSE"
      - ".github/workflows/dependabot-auto-merge.yml"
      - ".github/dependabot-auto-merge.yml"
      - "function/_img/**"
      - "function/_script/**"

      # Ignore files used only by the frontend
      - "frontend/**"
      - ".github/workflows/frontend-*.yml"

env:
  # e.g. projects/123456789/locations/global/workloadIdentityPools/github-actions/providers/github-actions
  WORKLOAD_IDENTITY_PROVIDER: "projects/659376400894/locations/global/workloadIdentityPools/primap/providers/github-actions"

  # e.g. terraform@GCP_PROJECT_ID.iam.gserviceaccount.com
  SERVICE_ACCOUNT_EMAIL: "deployer@primap.iam.gserviceaccount.com"

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

defaults:
  run:
    working-directory: function

jobs:
  deploy:
    name: serverless

    runs-on: ubuntu-latest
    concurrency: function-deploy

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          cache-dependency-path: "function/package-lock.json"

      - run: npm install

      - id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT_EMAIL }}

      - name: GCP Authenticate
        uses: google-github-actions/setup-gcloud@v0

      - name: Replace __GOOGLE_APPLICATION_CREDENTIALS__ in serverless.yml
        run: |
          sed -i "s!__GOOGLE_APPLICATION_CREDENTIALS__!${GOOGLE_APPLICATION_CREDENTIALS}!g" serverless.yml
          grep "credentials:"  serverless.yml

      # TODO: debug log
      - run: ls -l ${GOOGLE_APPLICATION_CREDENTIALS}
      - run: cat serverless.yml

      - name: serverless deploy
        run: npm run deploy
        env:
          SENTRY_DSN: ${{ secrets.FUNCTION_SENTRY_DSN }}
          SLS_DEBUG: "*"

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT_FUNCTION }}
        with:
          environment: production

      - name: Slack Notification
        uses: lazy-actions/slatify@master
        if: always()
        continue-on-error: true
        with:
          job_name: '*serverless*'
          type: ${{ job.status }}
          icon_emoji: ":octocat:"
          url: ${{ secrets.SLACK_WEBHOOK }}
          token: ${{ secrets.GITHUB_TOKEN }}
